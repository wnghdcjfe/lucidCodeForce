"use strict";

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

var curry = require("../Strict/curry.js");

var nop = require("../Strict/nop.js");

var go1 = require("../Strict/go1.js");

var toIter = require("../Strict/toIter.js");

var noop = require("../Strict/noop.js");

const resolved = Promise.resolve();
module.exports = curry(function* takeWhileLazy(f, iter) {
  let prev = resolved,
      ok = true;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = toIter(iter)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const a = _step.value;

      const _ok = ok && go1(a, f);

      if (_ok instanceof Promise) {
        _ok.catch(noop);

        yield prev = prev.then(_ => _ok).then(_ok => (ok = _ok) ? a : Promise.reject(nop));
        prev = prev.catch(noop);
      } else if (ok = _ok) {
        yield a;
      }

      if (!ok) break;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});