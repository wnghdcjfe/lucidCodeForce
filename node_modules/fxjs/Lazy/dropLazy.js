"use strict";

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.promise");

var curry = require("../Strict/curry.js");

var toIter = require("../Strict/toIter.js");

var noop = require("../Strict/noop.js");

var nop = require("../Strict/nop.js");

module.exports = curry(function* dropLazy(l, iter) {
  if (l < 1) yield* iter;
  let prev = null,
      i = 0;
  iter = toIter(iter);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = iter[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const a = _step.value;

      if (a instanceof Promise) {
        a.catch(noop);
        yield prev = (prev || Promise.resolve()).then(_ => a).then(b => ++i > l ? b : Promise.reject(nop));
        prev = prev.catch(noop);
      } else if (++i == l) return yield* iter;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});